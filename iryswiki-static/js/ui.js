/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º IRYSWIKI
 */
class UIManager {
  constructor() {
    this.modals = {};
    this.activeModals = [];
    this.walletConnectionListeners = [];
    this.threadDataListeners = [];
    this.initialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
   */
  initialize() {
    if (this.initialized) return;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    this.initializeModals();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    this.setupWalletButtons();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.setupEventHandlers();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    this.updateWalletUI();
    
    this.initialized = true;
    console.log('‚úÖ UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
   */
  initializeModals() {
    // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const modalElements = document.querySelectorAll('.modal');
    
    modalElements.forEach(modal => {
      const id = modal.id;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
      const closeBtn = modal.querySelector('.modal-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.closeModal(id));
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          this.closeModal(id);
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      this.modals[id] = modal;
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    if (this.modals['wallet-modal']) {
      const walletOptions = this.modals['wallet-modal'].querySelectorAll('.wallet-option');
      
      walletOptions.forEach(option => {
        option.addEventListener('click', async () => {
          const walletType = option.getAttribute('data-wallet');
          this.closeModal('wallet-modal');
          await walletManager.connect(walletType);
        });
      });
    }
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   * @param {string} id - ID –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   */
  openModal(id) {
    const modal = this.modals[id];
    
    if (!modal) {
      console.error(`‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }
    
    modal.classList.add('active');
    this.activeModals.push(id);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden';
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   * @param {string} id - ID –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   */
  closeModal(id) {
    const modal = this.modals[id];
    
    if (!modal) {
      console.error(`‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å ID "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }
    
    modal.classList.remove('active');
    this.activeModals = this.activeModals.filter(modalId => modalId !== id);
    
    // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    if (this.activeModals.length === 0) {
      document.body.style.overflow = '';
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
   */
  setupWalletButtons() {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    const connectWalletBtn = document.getElementById('connect-wallet-btn');
    if (connectWalletBtn) {
      connectWalletBtn.addEventListener('click', () => {
        this.openModal('wallet-modal');
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤ CTA —Å–µ–∫—Ü–∏–∏
    const ctaConnectBtn = document.getElementById('cta-connect-btn');
    if (ctaConnectBtn) {
      ctaConnectBtn.addEventListener('click', () => {
        this.openModal('wallet-modal');
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    const disconnectWalletBtn = document.getElementById('disconnect-wallet-btn');
    if (disconnectWalletBtn) {
      disconnectWalletBtn.addEventListener('click', () => {
        walletManager.disconnect();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const createThreadBtn = document.getElementById('create-thread-btn');
    if (createThreadBtn) {
      createThreadBtn.addEventListener('click', () => {
        if (walletManager.isConnected) {
          router.navigateTo('/create-thread');
        } else {
          this.openModal('wallet-modal');
        }
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const debugStorageBtn = document.getElementById('debug-storage');
    if (debugStorageBtn) {
      debugStorageBtn.addEventListener('click', async () => {
        console.log('üìä –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
        await hybridStorage.debugStorageStats();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const clearStorageBtn = document.getElementById('clear-storage');
    if (clearStorageBtn) {
      clearStorageBtn.addEventListener('click', () => {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç—Ä–µ–¥—ã –∏ –ø—Ä–æ—Ñ–∏–ª–∏.')) {
          hybridStorage.clearAllLocalStorage();
          window.location.reload();
        }
      });
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  setupEventHandlers() {
    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    walletManager.onConnectionChanged = (data) => {
      this.updateWalletUI(data);
      
      // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
      this.walletConnectionListeners.forEach(listener => {
        try {
          listener(data);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
        }
      });
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∫–æ—à–µ–ª—å–∫–∞
   */
  async updateWalletUI(data) {
    const isConnected = data ? data.isConnected : walletManager.isConnected;
    const address = data ? data.address : walletManager.address;
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã UI –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const walletConnected = document.querySelector('.wallet-connected');
    const walletNotConnected = document.querySelector('.wallet-not-connected');
    const profileBtn = document.getElementById('setup-profile-btn');
    const ctaConnectBtn = document.getElementById('cta-connect-btn');
    const createThreadBtn = document.getElementById('create-thread-btn');
    
    if (isConnected && address) {
      // –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (walletConnected) walletConnected.classList.remove('hidden');
      if (walletNotConnected) walletNotConnected.classList.add('hidden');
      if (profileBtn) profileBtn.classList.remove('hidden');
      if (ctaConnectBtn) ctaConnectBtn.classList.add('hidden');
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
      const walletAddressEl = document.getElementById('wallet-address');
      if (walletAddressEl) {
        walletAddressEl.textContent = walletManager.formatAddress(address);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
      await this.updateBalanceUI();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
      if (createThreadBtn) {
        const canCreateThread = await walletManager.canAffordAction('thread');
        
        createThreadBtn.disabled = !canCreateThread;
        
        if (!canCreateThread) {
          const threadRequirement = walletManager.getTransactionRequirement('thread');
          createThreadBtn.textContent = `–ù—É–∂–Ω–æ ${threadRequirement.amount} IRYS`;
        } else {
          createThreadBtn.innerHTML = '<span class="btn-icon">‚ûï</span> –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥';
        }
      }
    } else {
      // –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (walletConnected) walletConnected.classList.add('hidden');
      if (walletNotConnected) walletNotConnected.classList.remove('hidden');
      if (profileBtn) profileBtn.classList.add('hidden');
      if (ctaConnectBtn) ctaConnectBtn.classList.remove('hidden');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
      if (createThreadBtn) {
        createThreadBtn.disabled = true;
        createThreadBtn.innerHTML = '<span class="btn-icon">üíº</span> –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫';
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    this.updateHomeStats();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
   */
  async updateBalanceUI() {
    if (!walletManager.isConnected) return;
    
    try {
      const balance = await walletManager.getBalance();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —à–∞–ø–∫–µ
      const walletBalanceEl = document.getElementById('wallet-balance');
      if (walletBalanceEl) {
        walletBalanceEl.textContent = this.formatBalance(balance);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
      const balanceElements = [
        'current-balance',
        'create-balance',
        'reply-balance',
        'profile-balance'
      ];
      
      balanceElements.forEach(id => {
        const el = document.getElementById(id);
        if (el) {
          el.textContent = this.formatBalance(balance);
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} balance - –ë–∞–ª–∞–Ω—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
   */
  formatBalance(balance) {
    return parseFloat(balance).toFixed(4);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  async updateHomeStats() {
    try {
      const threads = await hybridStorage.getAllThreads();
      
      // –°—á–µ—Ç—á–∏–∫ —Ç—Ä–µ–¥–æ–≤
      const totalThreadsEl = document.getElementById('total-threads');
      if (totalThreadsEl) {
        totalThreadsEl.textContent = threads.length;
      }
      
      // –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const uniqueAuthors = new Set(threads.map(thread => thread.author)).size;
      const activeUsersEl = document.getElementById('active-users');
      if (activeUsersEl) {
        activeUsersEl.textContent = uniqueAuthors;
      }
      
      // –°—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
      const totalReplies = threads.reduce((sum, thread) => sum + (thread.replies || 0), 0);
      const totalRepliesEl = document.getElementById('total-replies');
      if (totalRepliesEl) {
        totalRepliesEl.textContent = totalReplies;
      }
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      this.updateCategories(threads);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–¥–æ–≤
      this.updateRecentThreads(threads);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @param {Array} threads - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤
   */
  updateCategories(threads) {
    const categoriesContainer = document.getElementById('categories-container');
    if (!categoriesContainer) return;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    categoriesContainer.innerHTML = '';
    
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–¥–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryCounts = {};
    IRYSWIKI_CONFIG.threadCategories.forEach(cat => {
      categoryCounts[cat.id] = 0;
    });
    
    threads.forEach(thread => {
      if (categoryCounts[thread.category] !== undefined) {
        categoryCounts[thread.category]++;
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    IRYSWIKI_CONFIG.threadCategories.forEach(category => {
      const count = categoryCounts[category.id] || 0;
      
      const categoryCard = document.createElement('a');
      categoryCard.href = `#/threads?category=${category.id}`;
      categoryCard.className = 'category-card';
      
      categoryCard.innerHTML = `
        <div class="category-header">
          <div class="category-icon">${category.icon}</div>
          <span class="category-count ${category.cssClass}">${count} —Ç—Ä–µ–¥–æ–≤</span>
        </div>
        <h3 class="category-title">${category.name}</h3>
        <p class="category-description">${category.description}</p>
      `;
      
      categoriesContainer.appendChild(categoryCard);
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–¥–æ–≤
   * @param {Array} threads - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤
   */
  updateRecentThreads(threads) {
    const recentThreadsContainer = document.getElementById('recent-threads-container');
    if (!recentThreadsContainer) return;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    recentThreadsContainer.innerHTML = '';
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (threads.length === 0) {
      recentThreadsContainer.innerHTML = `
        <div class="empty-state">
          <div class="empty-icon">üí¨</div>
          <h3>–ù–µ—Ç —Ç—Ä–µ–¥–æ–≤</h3>
          <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –Ω–∞—á–Ω–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!</p>
          <button id="empty-create-thread-btn" class="btn btn-primary">
            <span class="btn-icon">‚ûï</span> –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–¥
          </button>
        </div>
      `;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
      const emptyCreateThreadBtn = document.getElementById('empty-create-thread-btn');
      if (emptyCreateThreadBtn) {
        emptyCreateThreadBtn.addEventListener('click', () => {
          if (walletManager.isConnected) {
            router.navigateTo('/create-thread');
          } else {
            this.openModal('wallet-modal');
          }
        });
      }
      
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–¥–æ–≤
    const recentThreads = threads.slice(0, 5);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–¥–æ–≤
    recentThreads.forEach(thread => {
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const category = IRYSWIKI_CONFIG.threadCategories.find(cat => cat.id === thread.category) || {
        name: '–î—Ä—É–≥–æ–µ',
        cssClass: 'category-other',
        icon: 'üîç'
      };
      
      const threadCard = document.createElement('a');
      threadCard.href = `#/threads/${thread.id}`;
      threadCard.className = 'thread-card';
      
      threadCard.innerHTML = `
        <div class="thread-categories">
          <span class="thread-category ${category.cssClass}">
            ${category.icon} ${category.name}
          </span>
          ${thread.isPinned ? '<span class="thread-category category-pinned">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ</span>' : ''}
        </div>
        <h3 class="thread-title">${this.escapeHTML(thread.title)}</h3>
        <p class="thread-excerpt">${this.escapeHTML(thread.content.substring(0, 150))}...</p>
        <div class="thread-meta">
          <div class="thread-meta-item">
            <span class="meta-icon">üë§</span>
            <span>${walletManager.formatAddress(thread.author)}</span>
          </div>
          <div class="thread-meta-item">
            <span class="meta-icon">üí¨</span>
            <span>${thread.replies || 0} –æ—Ç–≤–µ—Ç–æ–≤</span>
          </div>
          <div class="thread-meta-item">
            <span class="meta-icon">üëÅÔ∏è</span>
            <span>${thread.views || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
          </div>
          <div class="thread-meta-item">
            <span>${this.formatTimeAgo(thread.lastActivity)}</span>
          </div>
        </div>
      `;
      
      recentThreadsContainer.appendChild(threadCard);
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "–ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞"
   * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatTimeAgo(timestamp) {
    const now = Date.now();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`;
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
    if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`;
    return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
   * @param {string} html - –°—Ç—Ä–æ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  escapeHTML(html) {
    return html
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è-—Å–ª—É—à–∞—Ç–µ–ª—å
   */
  addWalletConnectionListener(listener) {
    this.walletConnectionListeners.push(listener);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤
   * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è-—Å–ª—É—à–∞—Ç–µ–ª—å
   */
  addThreadDataListener(listener) {
    this.threadDataListeners.push(listener);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤
   * @param {Array} threads - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤
   */
  notifyThreadDataListeners(threads) {
    this.threadDataListeners.forEach(listener => {
      try {
        listener(threads);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤:', error);
      }
    });
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   * @param {string} [target] - ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
   */
  showError(message, target) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', message);
    
    if (target) {
      const targetElement = document.getElementById(target);
      
      if (targetElement) {
        const errorElement = document.createElement('div');
        errorElement.className = 'alert alert-error';
        errorElement.innerHTML = `
          <span class="alert-icon">‚ùå</span>
          <div class="alert-content">
            <p>${message}</p>
          </div>
        `;
        
        targetElement.prepend(errorElement);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          errorElement.remove();
        }, 5000);
      }
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   * @param {string} [target] - ID —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  showSuccess(message, target) {
    console.log('‚úÖ –£—Å–ø–µ—Ö:', message);
    
    if (target) {
      const targetElement = document.getElementById(target);
      
      if (targetElement) {
        const successElement = document.createElement('div');
        successElement.className = 'alert alert-success';
        successElement.innerHTML = `
          <span class="alert-icon">‚úÖ</span>
          <div class="alert-content">
            <p>${message}</p>
          </div>
        `;
        
        targetElement.prepend(successElement);
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          successElement.remove();
        }, 5000);
      }
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä UI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const uiManager = new UIManager();

