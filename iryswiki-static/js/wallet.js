/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º –¥–ª—è IRYSWIKI
 */
class WalletManager {
  constructor() {
    this.provider = null;
    this.signer = null;
    this.address = null;
    this.isConnected = false;
    this.isConnecting = false;
    this.error = null;
    this.onConnectionChanged = null; // Callback –¥–ª—è UI
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Promise<void>}
   */
  async initialize() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ethers.js
    if (typeof ethers === 'undefined') {
      console.error('‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ethers.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      this.error = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ethers.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞';
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ Ethereum –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (window.ethereum) {
      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑ window.ethereum
        this.provider = new ethers.providers.Web3Provider(window.ethereum);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        const accounts = await this.provider.listAccounts();
        
        if (accounts.length > 0) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
          this.address = accounts[0];
          this.signer = this.provider.getSigner();
          this.isConnected = true;
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          await this.initializeStorage();
          
          // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
          if (this.onConnectionChanged) {
            this.onConnectionChanged({
              isConnected: true,
              address: this.address
            });
          }
          
          console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.address);
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        window.ethereum.on('accountsChanged', this.handleAccountsChanged.bind(this));
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã —Å–µ—Ç–∏
        window.ethereum.on('chainChanged', this.handleChainChanged.bind(this));
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
        this.error = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`;
      }
    } else {
      console.error('‚ùå MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–π Ethereum –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.error = 'MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–π Ethereum –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask.';
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
   * @param {string} [walletType='metamask'] - –¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async connect(walletType = 'metamask') {
    try {
      this.isConnecting = true;
      this.error = null;
      
      if (this.onConnectionChanged) {
        this.onConnectionChanged({
          isConnecting: true,
          isConnected: this.isConnected,
          address: this.address
        });
      }
      
      if (!window.ethereum) {
        throw new Error('MetaMask –∏–ª–∏ –¥—Ä—É–≥–æ–π Ethereum –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ—à–µ–ª—å–∫–∞
      let provider;
      
      switch (walletType) {
        case 'metamask':
          provider = window.ethereum;
          break;
        case 'walletconnect':
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è WalletConnect
          throw new Error('WalletConnect –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
        case 'coinbase':
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è Coinbase Wallet
          throw new Error('Coinbase Wallet –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
        default:
          provider = window.ethereum;
      }
      
      // –°–æ–∑–¥–∞–µ–º ethers –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      this.provider = new ethers.providers.Web3Provider(provider);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É
      const accounts = await this.provider.send('eth_requestAccounts', []);
      
      if (accounts.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É');
      }
      
      this.address = accounts[0];
      this.signer = this.provider.getSigner();
      this.isConnected = true;
      
      console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.address);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏
      await this.checkAndSwitchNetwork();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      await this.initializeStorage();
      
      this.isConnecting = false;
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
      if (this.onConnectionChanged) {
        this.onConnectionChanged({
          isConnected: true,
          isConnecting: false,
          address: this.address
        });
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞';
      
      if (error.message.includes('rejected')) {
        errorMessage = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
      } else {
        errorMessage = error.message;
      }
      
      this.error = errorMessage;
      this.isConnecting = false;
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
      if (this.onConnectionChanged) {
        this.onConnectionChanged({
          isConnected: false,
          isConnecting: false,
          error: errorMessage,
          address: null
        });
      }
      
      return false;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞
   */
  disconnect() {
    this.provider = null;
    this.signer = null;
    this.address = null;
    this.isConnected = false;
    this.isConnecting = false;
    this.error = null;
    
    // –°–±—Ä–æ—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    hybridStorage.reset();
    
    console.log('üîå –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
    if (this.onConnectionChanged) {
      this.onConnectionChanged({
        isConnected: false,
        address: null
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
   * @param {Array<string>} accounts - –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   */
  async handleAccountsChanged(accounts) {
    if (accounts.length === 0) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª –∞–∫–∫–∞—É–Ω—Ç
      this.disconnect();
    } else if (accounts[0] !== this.address) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª –∞–∫–∫–∞—É–Ω—Ç
      this.address = accounts[0];
      this.signer = this.provider.getSigner();
      
      console.log('üîÑ –ê–∫–∫–∞—É–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω:', this.address);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –Ω–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
      await this.initializeStorage();
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è UI
      if (this.onConnectionChanged) {
        this.onConnectionChanged({
          isConnected: true,
          address: this.address
        });
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Å–µ—Ç–∏
   */
  async handleChainChanged() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    this.provider = new ethers.providers.Web3Provider(window.ethereum);
    this.signer = this.provider.getSigner();
    
    console.log('üîÑ –°–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
    await this.checkAndSwitchNetwork();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –Ω–æ–≤–æ–π —Å–µ—Ç—å—é
    await this.initializeStorage();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ç–∏
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
   */
  async checkAndSwitchNetwork() {
    try {
      if (!this.provider) return false;
      
      const network = await this.provider.getNetwork();
      const targetChainId = IRYSWIKI_CONFIG.blockchain.chainId;
      
      if (network.chainId !== targetChainId) {
        console.log(`–¢–µ–∫—É—â–∞—è —Å–µ—Ç—å: ${network.chainId}, —Ü–µ–ª–µ–≤–∞—è: ${targetChainId}`);
        
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ç—å Irys
          await window.ethereum.request({
            method: 'wallet_switchEthereumChain',
            params: [{ chainId: `0x${targetChainId.toString(16)}` }],
          });
          
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Irys —Å–µ—Ç—å');
          return true;
        } catch (switchError) {
          // –ï—Å–ª–∏ —Å–µ—Ç–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ–µ
          if (switchError.code === 4902 || switchError.message?.includes('network')) {
            try {
              await window.ethereum.request({
                method: 'wallet_addEthereumChain',
                params: [{
                  chainId: `0x${targetChainId.toString(16)}`,
                  chainName: IRYSWIKI_CONFIG.networkConfig.chainName,
                  nativeCurrency: IRYSWIKI_CONFIG.networkConfig.nativeCurrency,
                  rpcUrls: IRYSWIKI_CONFIG.networkConfig.rpcUrls,
                  blockExplorerUrls: IRYSWIKI_CONFIG.networkConfig.blockExplorerUrls
                }],
              });
              
              console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞ Irys —Å–µ—Ç—å');
              return true;
            } catch (addError) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Irys —Å–µ—Ç–∏:', addError);
              this.error = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ Irys —Å–µ—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ—à–µ–ª—å–∫–∞.';
              return false;
            }
          } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏:', switchError);
            this.error = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Irys —Å–µ—Ç—å (Chain ID: 1270) –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ—à–µ–ª—å–∫–∞.';
            return false;
          }
        }
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', error);
      return false;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async initializeStorage() {
    try {
      if (!this.isConnected || !this.provider || !this.signer) {
        return false;
      }
      
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º');
      
      await hybridStorage.initialize(this.provider, this.signer);
      
      console.log('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
      this.error = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${error.message}`;
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Promise<string>} –ë–∞–ª–∞–Ω—Å –≤ IRYS
   */
  async getBalance() {
    if (!this.isConnected) return '0';
    
    try {
      return await hybridStorage.getBalance();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return '0';
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} [address] - –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–∏–ª–∏ —Ç–µ–∫—É—â–∏–π, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
   * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
   */
  formatAddress(address) {
    address = address || this.address;
    
    if (!address) return '';
    
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
   * @param {string} actionType - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (thread, reply, profile)
   * @returns {Promise<boolean>} –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞
   */
  async canAffordAction(actionType) {
    if (!this.isConnected) return false;
    
    try {
      const balance = await this.getBalance();
      const requirement = hybridStorage.getTransactionRequirement(actionType);
      
      return parseFloat(balance) >= parseFloat(requirement.amount);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${actionType}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–π —Å—É–º–º—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
   * @param {string} actionType - –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (thread, reply, profile)
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
   */
  getTransactionRequirement(actionType) {
    return hybridStorage.getTransactionRequirement(actionType);
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
const walletManager = new WalletManager();

