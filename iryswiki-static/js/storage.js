/**
 * –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö IRYSWIKI
 * –°–æ—á–µ—Ç–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
class HybridStorage {
  constructor() {
    this.isInitialized = false;
    this.provider = null;
    this.signer = null;
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  reset() {
    console.log('üîÑ –°–±—Ä–æ—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
    this.isInitialized = false;
    this.provider = null;
    this.signer = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
   * @param {Object} provider - –ü—Ä–æ–≤–∞–π–¥–µ—Ä ethers.js
   * @param {Object} signer - –ü–æ–¥–ø–∏—Å—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ethers.js
   * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async initialize(provider, signer) {
    try {
      this.reset();
      
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IRYSWIKI —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
      console.log('üí∞ –ö–æ—à–µ–ª–µ–∫ –æ–ø–ª–∞—Ç—ã:', IRYSWIKI_CONFIG.paymentWallet);
      
      this.provider = provider;
      this.signer = signer;
      
      if (!this.signer) {
        throw new Error('Signer –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏
      const network = await this.provider.getNetwork();
      if (network.chainId !== IRYSWIKI_CONFIG.blockchain.chainId) {
        console.warn(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Ç—å. –û–∂–∏–¥–∞–µ—Ç—Å—è ${IRYSWIKI_CONFIG.blockchain.chainId}, –ø–æ–ª—É—á–µ–Ω–æ ${network.chainId}`);
        throw new Error(`–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–µ—Ç—å Irys (Chain ID: ${IRYSWIKI_CONFIG.blockchain.chainId})`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
      const address = await this.signer.getAddress();
      const balance = await this.provider.getBalance(address);
      const balanceInEth = ethers.utils.formatEther(balance);
      
      console.log('üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:', balanceInEth, 'IRYS');
      
      this.isInitialized = true;
      console.log('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
      this.isInitialized = false;
      this.provider = null;
      this.signer = null;
      throw error;
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
   * @param {string} txHash - –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param {string} expectedAmount - –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞
   * @param {string} from - –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
   * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async verifyPaymentTransaction(txHash, expectedAmount, from) {
    try {
      console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txHash);
      
      const tx = await this.provider.getTransaction(txHash);
      
      if (!tx) {
        console.error('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', txHash);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const isCorrectRecipient = tx.to.toLowerCase() === IRYSWIKI_CONFIG.paymentWallet.toLowerCase();
      const isCorrectSender = tx.from.toLowerCase() === from.toLowerCase();
      const expectedAmountWei = ethers.utils.parseEther(expectedAmount);
      const isCorrectAmount = tx.value.gte(expectedAmountWei);

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
      console.log('  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å:', isCorrectRecipient, tx.to);
      console.log('  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', isCorrectSender, tx.from);
      console.log('  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞:', isCorrectAmount, ethers.utils.formatEther(tx.value), '>=', expectedAmount);

      const isVerified = isCorrectRecipient && isCorrectSender && isCorrectAmount;
      
      if (isVerified) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        this.storeVerifiedTransaction({
          hash: txHash,
          from,
          amount: ethers.utils.formatEther(tx.value),
          purpose: this.getTransactionPurpose(expectedAmount),
          timestamp: Date.now(),
          verified: true
        });
      }

      return isVerified;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—É–º–º–µ
   * @param {string} amount - –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @returns {'THREAD'|'REPLY'|'PROFILE'} –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  getTransactionPurpose(amount) {
    if (amount === IRYSWIKI_CONFIG.fees.THREAD) return 'THREAD';
    if (amount === IRYSWIKI_CONFIG.fees.REPLY) return 'REPLY';
    if (amount === IRYSWIKI_CONFIG.fees.PROFILE) return 'PROFILE';
    return 'UNKNOWN';
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param {Object} transaction - –û–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  storeVerifiedTransaction(transaction) {
    try {
      const existing = this.getVerifiedTransactions();
      const updated = [...existing.filter(tx => tx.hash !== transaction.hash), transaction];
      localStorage.setItem(IRYSWIKI_CONFIG.storage.keys.VERIFIED_TRANSACTIONS, JSON.stringify(updated));
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', transaction.hash);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   * @returns {Array} –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  getVerifiedTransactions() {
    try {
      const stored = localStorage.getItem(IRYSWIKI_CONFIG.storage.keys.VERIFIED_TRANSACTIONS);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
      return [];
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param {string} amount - –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
   * @returns {Promise<string>} –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async sendPaymentTransaction(amount) {
    if (!this.isInitialized || !this.signer) {
      throw new Error('–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    console.log('üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');
    console.log('  - –°—É–º–º–∞:', amount, 'IRYS');
    console.log('  - –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', IRYSWIKI_CONFIG.paymentWallet);

    const address = await this.signer.getAddress();
    console.log('  - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', address);
    
    const feeInWei = ethers.utils.parseEther(amount);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const tx = await this.signer.sendTransaction({
      to: IRYSWIKI_CONFIG.paymentWallet,
      value: feeInWei,
    });

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
    return tx.hash;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   * @param {Object} thread - –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥–∞
   * @returns {Promise<string>} –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async createThread(thread) {
    if (!this.isInitialized || !this.signer) {
      throw new Error('–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    try {
      console.log('üßµ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–¥–∞ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–∞...');
      
      const address = await this.signer.getAddress();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const balance = await this.provider.getBalance(address);
      const threadFeeWei = ethers.utils.parseEther(IRYSWIKI_CONFIG.fees.THREAD);
      
      if (balance.lt(threadFeeWei)) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º ${IRYSWIKI_CONFIG.fees.THREAD} IRYS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞.`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
      const paymentTxHash = await this.sendPaymentTransaction(IRYSWIKI_CONFIG.fees.THREAD);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const isPaymentVerified = await this.verifyPaymentTransaction(
        paymentTxHash, 
        IRYSWIKI_CONFIG.fees.THREAD, 
        address
      );
      
      if (!isPaymentVerified) {
        throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –¢—Ä–µ–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω.');
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–¥–∞
      const threadData = {
        ...thread,
        id: `thread-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        transactionId: paymentTxHash,
        author: address,
        likes: 0,
        replies: 0,
        views: 0,
        lastActivity: Date.now(),
        createdAt: Date.now(),
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      this.storeThreadLocally(threadData);
      
      console.log('‚úÖ –¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', paymentTxHash);
      console.log('üìù –¢—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ID:', threadData.id);
      
      return paymentTxHash;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @param {Object} thread - –û–±—ä–µ–∫—Ç —Ç—Ä–µ–¥–∞
   */
  storeThreadLocally(thread) {
    try {
      const existing = this.getAllThreadsFromStorage();
      const updated = [thread, ...existing.filter(t => t.id !== thread.id)];
      localStorage.setItem(IRYSWIKI_CONFIG.storage.keys.THREADS, JSON.stringify(updated));
      console.log('üíæ –¢—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', thread.title);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–¥–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–¥–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @returns {Array} –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤
   */
  getAllThreadsFromStorage() {
    try {
      const stored = localStorage.getItem(IRYSWIKI_CONFIG.storage.keys.THREADS);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–¥–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤
   */
  async getAllThreads() {
    try {
      console.log('üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–¥–æ–≤...');
      
      const threads = this.getAllThreadsFromStorage();
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${threads.length} —Ç—Ä–µ–¥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      threads.sort((a, b) => b.lastActivity - a.lastActivity);
      
      return threads;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–¥–∞ –ø–æ ID
   * @param {string} threadId - ID —Ç—Ä–µ–¥–∞
   * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç —Ç—Ä–µ–¥–∞ –∏–ª–∏ null
   */
  async getThread(threadId) {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–¥–∞ —Å ID: ${threadId}`);
      
      const threads = this.getAllThreadsFromStorage();
      const thread = threads.find(t => t.id === threadId);
      
      if (thread) {
        console.log('‚úÖ –¢—Ä–µ–¥ –Ω–∞–π–¥–µ–Ω:', thread.title);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        thread.views++;
        this.storeThreadLocally(thread);
        
        return thread;
      }
      
      console.log('‚ùå –¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–∞:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ–¥ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   * @param {string} threadId - ID —Ç—Ä–µ–¥–∞
   * @param {Object} reply - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
   * @returns {Promise<string>} –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async createReply(threadId, reply) {
    if (!this.isInitialized || !this.signer) {
      throw new Error('–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    try {
      console.log('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ–¥ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–∞...');
      
      const address = await this.signer.getAddress();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const balance = await this.provider.getBalance(address);
      const replyFeeWei = ethers.utils.parseEther(IRYSWIKI_CONFIG.fees.REPLY);
      
      if (balance.lt(replyFeeWei)) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º ${IRYSWIKI_CONFIG.fees.REPLY} IRYS –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
      const paymentTxHash = await this.sendPaymentTransaction(IRYSWIKI_CONFIG.fees.REPLY);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const isPaymentVerified = await this.verifyPaymentTransaction(
        paymentTxHash, 
        IRYSWIKI_CONFIG.fees.REPLY, 
        address
      );
      
      if (!isPaymentVerified) {
        throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–¥
      const thread = await this.getThread(threadId);
      if (!thread) {
        throw new Error('–¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
      const replyData = {
        ...reply,
        id: `reply-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        threadId,
        transactionId: paymentTxHash,
        author: address,
        likes: 0,
        createdAt: Date.now(),
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–¥
      thread.replies = (thread.replies || 0) + 1;
      thread.lastActivity = Date.now();
      
      // –ï—Å–ª–∏ —É —Ç—Ä–µ–¥–∞ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ replies, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!thread.repliesData) {
        thread.repliesData = [];
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–¥
      thread.repliesData.push(replyData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–¥
      this.storeThreadLocally(thread);
      
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', paymentTxHash);
      
      return paymentTxHash;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
   * @param {Object} profile - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
   * @returns {Promise<string>} –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async saveUserProfile(profile) {
    if (!this.isInitialized || !this.signer) {
      throw new Error('–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    try {
      console.log('üë§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–∞...');
      
      const address = await this.signer.getAddress();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const balance = await this.provider.getBalance(address);
      const profileFeeWei = ethers.utils.parseEther(IRYSWIKI_CONFIG.fees.PROFILE);
      
      if (balance.lt(profileFeeWei)) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º ${IRYSWIKI_CONFIG.fees.PROFILE} IRYS –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
      const paymentTxHash = await this.sendPaymentTransaction(IRYSWIKI_CONFIG.fees.PROFILE);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const isPaymentVerified = await this.verifyPaymentTransaction(
        paymentTxHash, 
        IRYSWIKI_CONFIG.fees.PROFILE, 
        address
      );
      
      if (!isPaymentVerified) {
        throw new Error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
      }
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è
      const profileData = {
        ...profile,
        id: `profile-${address}-${Date.now()}`,
        walletAddress: address,
        transactionId: paymentTxHash,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      this.storeProfileLocally(profileData);
      
      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîó –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', paymentTxHash);
      
      return paymentTxHash;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @param {Object} profile - –û–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è
   */
  storeProfileLocally(profile) {
    try {
      const existing = this.getAllProfilesFromStorage();
      const updated = [profile, ...existing.filter(p => p.walletAddress !== profile.walletAddress)];
      localStorage.setItem(IRYSWIKI_CONFIG.storage.keys.PROFILES, JSON.stringify(updated));
      console.log('üíæ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', profile.username);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @returns {Array} –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
   */
  getAllProfilesFromStorage() {
    try {
      const stored = localStorage.getItem(IRYSWIKI_CONFIG.storage.keys.PROFILES);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞
   * @param {string} walletAddress - –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ null
   */
  async getUserProfile(walletAddress) {
    try {
      console.log('üë§ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è:', walletAddress);
      
      const profiles = this.getAllProfilesFromStorage();
      const profile = profiles.find(p => p.walletAddress.toLowerCase() === walletAddress.toLowerCase());
      
      if (profile) {
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:', profile.username);
        return profile;
      }
      
      console.log('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', walletAddress);
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      return null;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ base64)
   * @param {File} imageFile - –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {Promise<string>} Data URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async uploadImage(imageFile) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64 = reader.result;
        resolve(base64);
      };
      reader.onerror = reject;
      reader.readAsDataURL(imageFile);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   * @returns {Promise<string>} –ë–∞–ª–∞–Ω—Å –≤ IRYS
   */
  async getBalance() {
    if (!this.isInitialized || !this.signer) {
      throw new Error('–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    try {
      const address = await this.signer.getAddress();
      const balance = await this.provider.getBalance(address);
      return ethers.utils.formatEther(balance);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return '0';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @param {string} purpose - –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
   */
  getTransactionRequirement(purpose) {
    const purposeUpper = purpose.toUpperCase();
    return {
      amount: IRYSWIKI_CONFIG.fees[purposeUpper],
      recipient: IRYSWIKI_CONFIG.paymentWallet,
      purpose
    };
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @returns {Promise<void>}
   */
  async debugStorageStats() {
    try {
      console.log('üìä –û–¢–õ–ê–î–ö–ê –ì–ò–ë–†–ò–î–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê:');
      
      const threads = this.getAllThreadsFromStorage();
      const profiles = this.getAllProfilesFromStorage();
      const verifiedTxs = this.getVerifiedTransactions();
      
      console.log(`   üìù –¢—Ä–µ–¥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${threads.length}`);
      console.log(`   üë§ –ü—Ä–æ—Ñ–∏–ª–µ–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${profiles.length}`);
      console.log(`   ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${verifiedTxs.length}`);
      
      if (threads.length > 0) {
        console.log('   –ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–µ–¥—ã:');
        threads.slice(0, 3).forEach(thread => {
          console.log(`     - "${thread.title}" –æ—Ç ${thread.author.slice(0, 8)}...`);
        });
      }
      
      if (verifiedTxs.length > 0) {
        console.log('   –ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:');
        verifiedTxs.slice(0, 3).forEach(tx => {
          console.log(`     - ${tx.hash.slice(0, 12)}... (${tx.amount} IRYS)`);
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  clearAllLocalStorage() {
    try {
      localStorage.removeItem(IRYSWIKI_CONFIG.storage.keys.THREADS);
      localStorage.removeItem(IRYSWIKI_CONFIG.storage.keys.PROFILES);
      localStorage.removeItem(IRYSWIKI_CONFIG.storage.keys.VERIFIED_TRANSACTIONS);
      console.log('üóëÔ∏è –í—Å–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const hybridStorage = new HybridStorage();

