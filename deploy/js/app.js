/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è IRYSWIKI
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
window.initHomePage = async function() {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    await uiManager.updateWalletUI();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–¥—ã
    const threads = await hybridStorage.getAllThreads();
    uiManager.updateHomeStats();
    uiManager.updateCategories(threads);
    uiManager.updateRecentThreads(threads);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
  }
};

window.initThreadsPage = async function(params) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
    const threadsContainer = document.getElementById('threads-container');
    const pagination = document.getElementById('threads-pagination');
    const searchInput = document.getElementById('thread-search');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const createThreadBtn = document.getElementById('create-thread-btn-page');
    
    if (!threadsContainer) {
      console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç—Ä–µ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
    if (createThreadBtn) {
      createThreadBtn.addEventListener('click', () => {
        if (walletManager.isConnected) {
          router.navigateTo('/create-thread');
        } else {
          uiManager.openModal('wallet-modal');
        }
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
      if (walletManager.isConnected) {
        const canCreateThread = await walletManager.canAffordAction('thread');
        createThreadBtn.disabled = !canCreateThread;
      } else {
        createThreadBtn.disabled = false;
      }
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (filterButtons) {
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
          filterButtons.forEach(btn => btn.classList.remove('active'));
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
          button.classList.add('active');
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
          const category = button.getAttribute('data-category');
          filterThreads(category, searchInput ? searchInput.value : '');
        });
      });
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        const activeFilter = document.querySelector('.filter-btn.active');
        const category = activeFilter ? activeFilter.getAttribute('data-category') : 'all';
        filterThreads(category, searchInput.value);
      });
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–¥—ã
    let allThreads = await hybridStorage.getAllThreads();
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–¥–æ–≤
    function filterThreads(category, searchQuery = '') {
      let filtered = allThreads;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category && category !== 'all') {
        filtered = filtered.filter(thread => thread.category === category);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        filtered = filtered.filter(thread => 
          thread.title.toLowerCase().includes(query) || 
          thread.content.toLowerCase().includes(query)
        );
      }
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥—ã
      displayThreads(filtered);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–¥–æ–≤
    function displayThreads(threads) {
      threadsContainer.innerHTML = '';
      
      if (threads.length === 0) {
        threadsContainer.innerHTML = `
          <div class="empty-state">
            <div class="empty-icon">üí¨</div>
            <h3>–ù–µ—Ç —Ç—Ä–µ–¥–æ–≤</h3>
            <p>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–¥.</p>
            <button id="empty-create-thread-btn" class="btn btn-primary">
              <span class="btn-icon">‚ûï</span> –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–¥
            </button>
          </div>
        `;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
        const emptyCreateThreadBtn = document.getElementById('empty-create-thread-btn');
        if (emptyCreateThreadBtn) {
          emptyCreateThreadBtn.addEventListener('click', () => {
            if (walletManager.isConnected) {
              router.navigateTo('/create-thread');
            } else {
              uiManager.openModal('wallet-modal');
            }
          });
        }
        
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–¥–∞
      threads.forEach(thread => {
        // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const category = IRYSWIKI_CONFIG.threadCategories.find(cat => cat.id === thread.category) || {
          name: '–î—Ä—É–≥–æ–µ',
          cssClass: 'category-other',
          icon: 'üîç'
        };
        
        const threadCard = document.createElement('div');
        threadCard.className = 'thread-card';
        
        threadCard.innerHTML = `
          <div class="thread-categories">
            <span class="thread-category ${category.cssClass}">
              ${category.icon} ${category.name}
            </span>
            ${thread.isPinned ? '<span class="thread-category category-pinned">üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ</span>' : ''}
          </div>
          <a href="#/threads/${thread.id}" class="thread-title-link">
            <h3 class="thread-title">${uiManager.escapeHTML(thread.title)}</h3>
          </a>
          <p class="thread-excerpt">${uiManager.escapeHTML(thread.content.substring(0, 150))}...</p>
          <div class="thread-meta">
            <div class="thread-meta-item">
              <span class="meta-icon">üë§</span>
              <span>${walletManager.formatAddress(thread.author)}</span>
            </div>
            <div class="thread-meta-item">
              <span class="meta-icon">üí¨</span>
              <span>${thread.replies || 0} –æ—Ç–≤–µ—Ç–æ–≤</span>
            </div>
            <div class="thread-meta-item">
              <span class="meta-icon">üëÅÔ∏è</span>
              <span>${thread.views || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
            </div>
            <div class="thread-meta-item">
              <span>${uiManager.formatTimeAgo(thread.lastActivity)}</span>
            </div>
          </div>
        `;
        
        threadsContainer.appendChild(threadCard);
      });
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);
    const initialCategory = urlParams.get('category') || 'all';
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
    filterButtons.forEach(button => {
      const category = button.getAttribute('data-category');
      if (category === initialCategory) {
        button.classList.add('active');
      } else {
        button.classList.remove('active');
      }
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–¥—ã —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
    filterThreads(initialCategory);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–¥–æ–≤:', error);
  }
};

window.initThreadDetailPage = async function(params) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Ç—Ä–µ–¥–∞
    const threadId = params.id;
    if (!threadId) {
      console.error('‚ùå ID —Ç—Ä–µ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      router.navigateTo('/threads');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
    const threadDetailContainer = document.getElementById('thread-detail-container');
    const threadDetail = document.querySelector('.thread-detail');
    const threadRepliesContainer = document.getElementById('thread-replies-container');
    const threadTitle = document.querySelector('.thread-title');
    const threadCategory = document.querySelector('.thread-category');
    const threadContent = document.querySelector('.thread-content');
    const authorAddress = document.querySelector('.author-address');
    const threadDate = document.querySelector('.thread-date');
    const viewsCount = document.querySelector('.views-count');
    const repliesCount = document.querySelector('.replies-count');
    const transactionLink = document.querySelector('.transaction-link');
    const replyForm = document.getElementById('reply-form');
    const formNotConnected = document.querySelector('.form-not-connected');
    const formConnected = document.querySelector('.form-connected');
    const connectToReplyBtn = document.querySelector('.connect-to-reply-btn');
    const submitReplyBtn = document.getElementById('submit-reply-btn');
    const replyContent = document.getElementById('reply-content');
    const currentThreadTitle = document.querySelector('.current-thread-title');
    
    if (!threadDetailContainer || !threadDetail) {
      console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã UI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥–∞
    const thread = await hybridStorage.getThread(threadId);
    
    if (!thread) {
      threadDetailContainer.innerHTML = `
        <div class="error-state">
          <div class="error-icon">‚ùå</div>
          <h3>–¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
          <p>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç—Ä–µ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
          <a href="#/threads" class="btn btn-primary">
            <span class="btn-icon">‚Üê</span> –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç—Ä–µ–¥–∞–º
          </a>
        </div>
      `;
      return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥–∞
    document.title = `${thread.title} | IRYSWIKI`;
    
    if (currentThreadTitle) {
      currentThreadTitle.textContent = thread.title;
    }
    
    if (threadDetail) {
      threadDetail.classList.remove('hidden');
    }
    
    if (threadTitle) {
      threadTitle.textContent = thread.title;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = IRYSWIKI_CONFIG.threadCategories.find(cat => cat.id === thread.category) || {
      name: '–î—Ä—É–≥–æ–µ',
      cssClass: 'category-other',
      icon: 'üîç'
    };
    
    if (threadCategory) {
      threadCategory.innerHTML = `
        <span class="${category.cssClass}">
          ${category.icon} ${category.name}
        </span>
      `;
    }
    
    if (threadContent) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É marked –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ markdown
      threadContent.innerHTML = marked.parse(thread.content);
    }
    
    if (authorAddress) {
      authorAddress.textContent = walletManager.formatAddress(thread.author);
    }
    
    if (threadDate) {
      const date = new Date(thread.createdAt);
      threadDate.textContent = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
    }
    
    if (viewsCount) {
      viewsCount.textContent = thread.views || 0;
    }
    
    if (repliesCount) {
      repliesCount.textContent = thread.repliesData ? `(${thread.repliesData.length})` : '(0)';
    }
    
    if (transactionLink) {
      transactionLink.textContent = `${thread.transactionId.substring(0, 10)}...${thread.transactionId.substring(thread.transactionId.length - 6)}`;
      transactionLink.href = `${IRYSWIKI_CONFIG.blockchain.explorerUrl}/tx/${thread.transactionId}`;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã
    if (threadRepliesContainer && thread.repliesData && thread.repliesData.length > 0) {
      threadRepliesContainer.innerHTML = '';
      
      thread.repliesData.forEach(reply => {
        const replyItem = document.createElement('div');
        replyItem.className = 'reply-item';
        
        replyItem.innerHTML = `
          <div class="reply-header">
            <div class="reply-author">
              <span class="author-icon">üë§</span>
              <span>${walletManager.formatAddress(reply.author)}</span>
            </div>
            <div class="reply-date">
              ${new Date(reply.createdAt).toLocaleDateString()}
            </div>
          </div>
          <div class="reply-content markdown-content">
            ${marked.parse(reply.content)}
          </div>
        `;
        
        threadRepliesContainer.appendChild(replyItem);
      });
    } else if (threadRepliesContainer) {
      threadRepliesContainer.innerHTML = `
        <div class="empty-replies">
          <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ —ç—Ç–æ—Ç —Ç—Ä–µ–¥!</p>
        </div>
      `;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–≤–µ—Ç–∞
    if (replyForm) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
      if (walletManager.isConnected) {
        if (formNotConnected) formNotConnected.classList.add('hidden');
        if (formConnected) formConnected.classList.remove('hidden');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await uiManager.updateBalanceUI();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (submitReplyBtn && replyContent) {
          submitReplyBtn.addEventListener('click', async () => {
            try {
              const content = replyContent.value.trim();
              
              if (!content) {
                uiManager.showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞', 'reply-form');
                return;
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
              const canReply = await walletManager.canAffordAction('reply');
              if (!canReply) {
                uiManager.showError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è ${IRYSWIKI_CONFIG.fees.REPLY} IRYS`, 'reply-form');
                return;
              }
              
              // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
              submitReplyBtn.disabled = true;
              submitReplyBtn.innerHTML = '<span class="spinner-small"></span> –û—Ç–ø—Ä–∞–≤–∫–∞...';
              
              // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
              await hybridStorage.createReply(threadId, {
                content: content
              });
              
              // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
              router.navigateTo(`/threads/${threadId}?refresh=${Date.now()}`);
              
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
              uiManager.showError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${error.message}`, 'reply-form');
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              submitReplyBtn.disabled = false;
              submitReplyBtn.innerHTML = '<span class="btn-icon">üì§</span> –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç';
            }
          });
        }
      } else {
        if (formNotConnected) formNotConnected.classList.remove('hidden');
        if (formConnected) formConnected.classList.add('hidden');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
        if (connectToReplyBtn) {
          connectToReplyBtn.addEventListener('click', () => {
            uiManager.openModal('wallet-modal');
          });
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–¥–∞:', error);
  }
};

window.initCreateThreadPage = async function() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
    const walletNotConnected = document.querySelector('.wallet-not-connected');
    const walletInsufficientFunds = document.querySelector('.wallet-insufficient-funds');
    const createThreadForm = document.querySelector('.create-thread-form');
    const titleInput = document.getElementById('thread-title');
    const categorySelect = document.getElementById('thread-category');
    const contentTextarea = document.getElementById('thread-content');
    const previewDiv = document.getElementById('thread-preview');
    const previewBtn = document.getElementById('preview-thread-btn');
    const createBtn = document.getElementById('create-thread-submit');
    const connectWalletBtn = document.querySelector('.connect-wallet-page-btn');
    const fundWalletBtn = document.getElementById('fund-wallet-btn');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    if (!walletManager.isConnected) {
      // –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (walletNotConnected) walletNotConnected.classList.remove('hidden');
      if (createThreadForm) createThreadForm.style.display = 'none';
      if (walletInsufficientFunds) walletInsufficientFunds.classList.add('hidden');
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
      if (connectWalletBtn) {
        connectWalletBtn.addEventListener('click', () => {
          uiManager.openModal('wallet-modal');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        uiManager.addWalletConnectionListener(() => {
          window.initCreateThreadPage();
        });
      }
      
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    const canCreateThread = await walletManager.canAffordAction('thread');
    
    if (!canCreateThread) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
      if (walletNotConnected) walletNotConnected.classList.add('hidden');
      if (walletInsufficientFunds) walletInsufficientFunds.classList.remove('hidden');
      if (createThreadForm) createThreadForm.style.display = 'none';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      await uiManager.updateBalanceUI();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
      if (fundWalletBtn) {
        fundWalletBtn.addEventListener('click', () => {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
          uiManager.showError('–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 'wallet-insufficient-funds');
        });
      }
      
      return;
    }
    
    // –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞
    if (walletNotConnected) walletNotConnected.classList.add('hidden');
    if (walletInsufficientFunds) walletInsufficientFunds.classList.add('hidden');
    if (createThreadForm) createThreadForm.style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    await uiManager.updateBalanceUI();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if (previewBtn && contentTextarea && previewDiv) {
      previewBtn.addEventListener('click', () => {
        const content = contentTextarea.value;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É marked –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ markdown
        previewDiv.innerHTML = content ? marked.parse(content) : '<em>–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞</em>';
      });
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const editorButtons = document.querySelectorAll('.editor-tool-btn');
    if (editorButtons && contentTextarea) {
      editorButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tool = button.getAttribute('data-tool');
          const textarea = contentTextarea;
          const start = textarea.selectionStart;
          const end = textarea.selectionEnd;
          const selectedText = textarea.value.substring(start, end);
          
          let replacement = '';
          
          switch (tool) {
            case 'bold':
              replacement = `**${selectedText || '–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç'}**`;
              break;
            case 'italic':
              replacement = `*${selectedText || '–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç'}*`;
              break;
            case 'link':
              replacement = `[${selectedText || '—Å—Å—ã–ª–∫–∞'}](http://example.com)`;
              break;
            case 'code':
              replacement = selectedText ? `\`\`\`\n${selectedText}\n\`\`\`` : `\`\`\`\n–∫–æ–¥\n\`\`\``;
              break;
            case 'image':
              replacement = `![${selectedText || '–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}](http://example.com/image.jpg)`;
              break;
          }
          
          textarea.value = textarea.value.substring(0, start) + replacement + textarea.value.substring(end);
          textarea.focus();
          textarea.selectionStart = start;
          textarea.selectionEnd = start + replacement.length;
        });
      });
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞
    if (createBtn && titleInput && categorySelect && contentTextarea) {
      createBtn.addEventListener('click', async () => {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
          const title = titleInput.value.trim();
          const category = categorySelect.value;
          const content = contentTextarea.value.trim();
          
          if (!title) {
            uiManager.showError('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–¥–∞', 'create-thread-form');
            return;
          }
          
          if (!content) {
            uiManager.showError('–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞', 'create-thread-form');
            return;
          }
          
          // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
          createBtn.disabled = true;
          createBtn.innerHTML = '<span class="spinner-small"></span> –°–æ–∑–¥–∞–Ω–∏–µ...';
          
          // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
          await hybridStorage.createThread({
            title,
            category,
            content,
            createdAt: Date.now()
          });
          
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–¥–æ–≤
          router.navigateTo('/threads');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
          uiManager.showSuccess('–¢—Ä–µ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'threads-container');
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞:', error);
          uiManager.showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞: ${error.message}`, 'create-thread-form');
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          createBtn.disabled = false;
          createBtn.innerHTML = '<span class="btn-icon">‚úì</span> –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥';
        }
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞:', error);
  }
};

window.initProfilePage = async function() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI
    const walletNotConnected = document.querySelector('.wallet-not-connected');
    const profileContainer = document.getElementById('profile-container');
    const profileNotFound = document.querySelector('.profile-not-found');
    const profileFound = document.querySelector('.profile-found');
    const connectWalletBtn = document.querySelector('.connect-wallet-profile-btn');
    const createProfileBtn = document.getElementById('create-profile-btn');
    const usernameInput = document.getElementById('profile-username');
    const bioInput = document.getElementById('profile-bio');
    const avatarInput = document.getElementById('avatar-input');
    const avatarPreview = document.getElementById('avatar-preview');
    const uploadAvatarBtn = document.getElementById('upload-avatar-btn');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    if (!walletManager.isConnected) {
      // –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
      if (walletNotConnected) walletNotConnected.classList.remove('hidden');
      if (profileContainer) profileContainer.style.display = 'none';
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
      if (connectWalletBtn) {
        connectWalletBtn.addEventListener('click', () => {
          uiManager.openModal('wallet-modal');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        uiManager.addWalletConnectionListener(() => {
          window.initProfilePage();
        });
      }
      
      return;
    }
    
    // –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (walletNotConnected) walletNotConnected.classList.add('hidden');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (profileContainer) {
      profileContainer.innerHTML = `
        <div class="loading-indicator">
          <div class="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞...</p>
        </div>
      `;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = await hybridStorage.getUserProfile(walletManager.address);
    
    if (!profile) {
      // –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è
      if (profileNotFound) profileNotFound.classList.remove('hidden');
      if (profileFound) profileFound.classList.add('hidden');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      await uiManager.updateBalanceUI();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞
      if (uploadAvatarBtn && avatarInput) {
        uploadAvatarBtn.addEventListener('click', () => {
          avatarInput.click();
        });
        
        if (avatarInput && avatarPreview) {
          avatarInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            
            if (file) {
              try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if (!IRYSWIKI_CONFIG.storage.supportedImageTypes.includes(file.type)) {
                  uiManager.showError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: JPG, PNG, GIF, WebP', 'create-profile-section');
                  return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if (file.size > IRYSWIKI_CONFIG.storage.maxFileSize) {
                  uiManager.showError(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${IRYSWIKI_CONFIG.storage.maxFileSize / 1024 / 1024}–ú–ë`, 'create-profile-section');
                  return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                const reader = new FileReader();
                reader.onload = (e) => {
                  avatarPreview.innerHTML = `<img src="${e.target.result}" alt="Avatar Preview">`;
                };
                reader.readAsDataURL(file);
                
              } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
                uiManager.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`, 'create-profile-section');
              }
            }
          });
        }
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      if (createProfileBtn) {
        createProfileBtn.addEventListener('click', async () => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
            const username = usernameInput.value.trim();
            const bio = bioInput.value.trim();
            
            if (!username) {
              uiManager.showError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'create-profile-section');
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            const canCreateProfile = await walletManager.canAffordAction('profile');
            if (!canCreateProfile) {
              uiManager.showError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è ${IRYSWIKI_CONFIG.fees.PROFILE} IRYS`, 'create-profile-section');
              return;
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä
            let avatarUrl = '';
            if (avatarInput.files && avatarInput.files[0]) {
              avatarUrl = await hybridStorage.uploadImage(avatarInput.files[0]);
            }
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            createProfileBtn.disabled = true;
            createProfileBtn.innerHTML = '<span class="spinner-small"></span> –°–æ–∑–¥–∞–Ω–∏–µ...';
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await hybridStorage.saveUserProfile({
              username,
              bio,
              avatarUrl,
              createdAt: Date.now()
            });
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            router.navigateTo('/profile?refresh=' + Date.now());
            
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            uiManager.showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`, 'create-profile-section');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            createProfileBtn.disabled = false;
            createProfileBtn.innerHTML = '<span class="btn-icon">‚úì</span> –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å';
          }
        });
      }
    } else {
      // –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
      if (profileNotFound) profileNotFound.classList.add('hidden');
      if (profileFound) profileFound.classList.remove('hidden');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      const profileName = document.getElementById('profile-name');
      const profileAddress = document.getElementById('profile-address');
      const profileAvatar = document.getElementById('profile-avatar-img');
      const profileBioText = document.getElementById('profile-bio-text');
      const profileThreads = document.getElementById('profile-threads');
      const profileReplies = document.getElementById('profile-replies');
      const profileTransactions = document.getElementById('profile-transactions');
      const profileTxLink = document.getElementById('profile-tx-link');
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      if (profileName) profileName.textContent = profile.username;
      if (profileAddress) profileAddress.textContent = walletManager.formatAddress(profile.walletAddress);
      
      if (profileAvatar) {
        if (profile.avatarUrl) {
          profileAvatar.src = profile.avatarUrl;
        } else {
          profileAvatar.src = 'assets/default-avatar.png';
        }
      }
      
      if (profileBioText) {
        profileBioText.textContent = profile.bio || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.';
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allThreads = await hybridStorage.getAllThreads();
      const userThreads = allThreads.filter(thread => thread.author.toLowerCase() === profile.walletAddress.toLowerCase());
      
      if (profileThreads) profileThreads.textContent = userThreads.length;
      
      // –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userReplyCount = 0;
      allThreads.forEach(thread => {
        if (thread.repliesData) {
          userReplyCount += thread.repliesData.filter(reply => reply.author.toLowerCase() === profile.walletAddress.toLowerCase()).length;
        }
      });
      
      if (profileReplies) profileReplies.textContent = userReplyCount;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const verifiedTxs = hybridStorage.getVerifiedTransactions()
        .filter(tx => tx.from.toLowerCase() === profile.walletAddress.toLowerCase());
      
      if (profileTransactions) profileTransactions.textContent = verifiedTxs.length;
      
      // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
      if (profileTxLink) {
        profileTxLink.textContent = `${profile.transactionId.substring(0, 10)}...${profile.transactionId.substring(profile.transactionId.length - 6)}`;
        profileTxLink.href = `${IRYSWIKI_CONFIG.blockchain.explorerUrl}/tx/${profile.transactionId}`;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ
      const profileThreadsContainer = document.getElementById('profile-threads-container');
      if (profileThreadsContainer) {
        if (userThreads.length > 0) {
          profileThreadsContainer.innerHTML = '';
          
          userThreads.forEach(thread => {
            // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const category = IRYSWIKI_CONFIG.threadCategories.find(cat => cat.id === thread.category) || {
              name: '–î—Ä—É–≥–æ–µ',
              cssClass: 'category-other',
              icon: 'üîç'
            };
            
            const threadCard = document.createElement('div');
            threadCard.className = 'thread-card';
            
            threadCard.innerHTML = `
              <div class="thread-categories">
                <span class="thread-category ${category.cssClass}">
                  ${category.icon} ${category.name}
                </span>
              </div>
              <a href="#/threads/${thread.id}" class="thread-title-link">
                <h3 class="thread-title">${uiManager.escapeHTML(thread.title)}</h3>
              </a>
              <p class="thread-excerpt">${uiManager.escapeHTML(thread.content.substring(0, 150))}...</p>
              <div class="thread-meta">
                <div class="thread-meta-item">
                  <span class="meta-icon">üí¨</span>
                  <span>${thread.replies || 0} –æ—Ç–≤–µ—Ç–æ–≤</span>
                </div>
                <div class="thread-meta-item">
                  <span class="meta-icon">üëÅÔ∏è</span>
                  <span>${thread.views || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</span>
                </div>
                <div class="thread-meta-item">
                  <span>${uiManager.formatTimeAgo(thread.lastActivity)}</span>
                </div>
              </div>
            `;
            
            profileThreadsContainer.appendChild(threadCard);
          });
        } else {
          profileThreadsContainer.innerHTML = `
            <div class="empty-state">
              <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤.</p>
              <a href="#/create-thread" class="btn btn-primary">
                <span class="btn-icon">‚ûï</span> –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥
              </a>
            </div>
          `;
        }
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
      const tabButtons = document.querySelectorAll('.tab-btn');
      const tabContents = document.querySelectorAll('.tab-content');
      
      if (tabButtons && tabContents) {
        tabButtons.forEach(button => {
          button.addEventListener('click', () => {
            // –£–¥–∞–ª—è–µ–º active —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            button.classList.add('active');
            const tabId = button.getAttribute('data-tab');
            document.getElementById(`tab-${tabId}`).classList.add('active');
          });
        });
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è:', error);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IRYSWIKI...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—à–µ–ª—å–∫–∞
    await walletManager.initialize();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
    uiManager.initialize();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    router.initialize('app-content');
    
    console.log('‚úÖ IRYSWIKI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  }
});
